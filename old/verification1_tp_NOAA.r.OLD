# Purpose
print(paste0("VERIFICATION OF TP (DAILY TOTAL PRECIPITATION) VS NOAA-GSOD DATA"))

# Load libraries
library(raster)
library(ncdf4)
library(verification)
library(Metrics)
library(plotrix)
library(lubridate)
library(dplyr)


# Global variables
my_working_dir  <- paste0("/OCEANASTORE/progetti/spitbran")
my_figs_dir     <- paste0("/OCEANASTORE/progetti/spitbran/work/figs")
my_output_dir   <- paste0("/OCEANASTORE/progetti/spitbran/work/res")
my_shp_dir      <- paste0("/OCEANASTORE/progetti/spitbran/work//shp")
my_eobs_long    <- NULL
my_era5_long    <- NULL
my_molo_long    <- NULL
my_bola_long    <- NULL
TD_normal       <- FALSE
ini_year        <- 1981
end_year        <- 2019
vec_years       <- seq(ini_year,end_year)
inches_to_mm    <- 25.4
sf_era5         <- 100

#
setEPS()
postscript(paste0(my_figs_dir,"/Taylor_Diag_vs_EOBS.eps"))

# Working directory
setwd(my_working_dir)

# MAIN LOOP OVER YEARS
for (my_year in vec_years) {
  print(paste0("___Running year ",my_year,"___"))

###
  # Load the point locations
#  my_anag_file     <- paste0(my_working_dir,"/NOAA/gsod/",my_year,"/NOAA-GSOD_ANAG_",my_year,".csv")
  my_anag_file     <- paste0(my_working_dir,"/E-OBS/points025_moloch_extent.csv")
  anag_full        <- read.csv(my_anag_file, sep=",", header=TRUE)
  pointCoordinates <- anag_full
  coordinates(pointCoordinates)= ~ LONGITUDE+LATITUDE
  print(paste0("Total number of points (rain-gauge locations) is ",length(pointCoordinates)))
  print(paste0(""))
  setEPS()
  postscript(paste0(my_figs_dir,"/rain-gauges_",my_year,".eps"))
  plot(pointCoordinates, main=paste0("# of rain-gauges ",length(pointCoordinates)))
  plot(extent(pointCoordinates), add=TRUE, col='red', lwd=1)
  dev.off()
###

###
  print(paste0("+++Reading raster files..."))
  # Raster files definition
  file_eobs   <- paste0("E-OBS/tp/E-OBS_day_tp_",my_year,".nc")
  file_era5   <- paste0("ERA5-Land/tp/ERA5-Land_",my_year,"-daysum_tp.nc")
  file_moloch <- paste0("work/moloch/moloch_",my_year,"_daysum_apcp.nc")
  file_bolam  <- paste0("work/bolam/bolam_",my_year,"_daysum_apcp.nc") 
  # Allocate rasters
  eobs_orig   <- brick(file_eobs)
  era5_orig   <- brick(file_era5)
  moloch_orig <- brick(file_moloch)
  bolam_orig  <- brick(file_bolam)
  print(paste0("+++OK"))
###

###
  print(paste0("+++Cropping extents and resampling rasters..."))
  # Get extent on the basis of the point coordinates
  my_extent           <- extent(pointCoordinates)
  # Crop E-OBS grid on my_extent and regrid (if needed)
  eobs_cropped        <- crop(eobs_orig, my_extent)
  eobs_resam          <- eobs_cropped
  # Crop ERA5-Land grid on my_extent and regrid (if needed)
  era5_cropped        <- crop(era5_orig, my_extent)
  era5_resam          <- resample(era5_cropped, eobs_cropped, method="bilinear")
  # Crop BOLAM grid on my_extent and regrid (if needed)
  bolam_cropped       <- crop(bolam_orig, my_extent)
  bolam_resam         <- resample(bolam_cropped, eobs_cropped, method="bilinear")
  # Crop MOLOCH grid on my_extent and regrid (if needed)
  moloch_cropped      <- crop(moloch_orig, my_extent)
  moloch_resam        <- resample(moloch_cropped, eobs_cropped, method="bilinear")
  print(paste0("+++OK"))
###

###
  # select only data from the current year
  print(paste0("+++select only data from the current year"))
  names(eobs_resam)   <- as.Date(names(eobs_resam),format="X%Y.%m.%d")
  if ((my_year == '1990') | (my_year == '2000') | (my_year == '2010')) { 
    names(era5_resam)   <- as.Date(names(era5_resam),format="X%Y%m%d.4791667")
  } else {
    names(era5_resam)   <- as.Date(names(era5_resam),format="X%Y.%m.%d.%H.%M.%S")
  }
  names(bolam_resam)  <- as.Date(names(bolam_resam),format="X%Y.%m.%d.%H.%M.%S")
  names(moloch_resam) <- names(bolam_resam)
  #
  r <- setZ(eobs_resam, as.Date(names(eobs_resam),format="X%Y.%m.%d"))
  eobs_ok             <- subset(r, which(getZ(r) >= paste0(my_year,'-01-02') & (getZ(r) <= paste0(my_year,'-12-31'))))
  #
  r <- setZ(era5_resam, as.Date(names(era5_resam),format="X%Y.%m.%d"))
  era5_ok             <- subset(r, which(getZ(r) >= paste0(my_year,'-01-02') & (getZ(r) <= paste0(my_year,'-12-31'))))
  #
  r <- setZ(moloch_resam, as.Date(names(moloch_resam),format="X%Y.%m.%d"))
  molo_ok             <- subset(r, which(getZ(r) >= paste0(my_year,'-01-02') & (getZ(r) <= paste0(my_year,'-12-31'))))
  #
  r <- setZ(bolam_resam, as.Date(names(bolam_resam),format="X%Y.%m.%d"))
  bola_ok             <- subset(r, which(getZ(r) >= paste0(my_year,'-01-02') & (getZ(r) <= paste0(my_year,'-12-31'))))
  #
  print(paste0("+++OK"))
###

###
  # Creating monthly data 
  print(paste0("+++Creating monthly data"))
  index_months         <- format(as.Date(names(molo_ok), format = "X%Y.%m.%d"), format = "%m")
  eobs_ok_month        <- stackApply(eobs_ok, index_months, fun = sum)
  names(eobs_ok_month) <- month.abb
  era5_ok_month        <- stackApply(era5_ok, index_months, fun = sum)
  names(era5_ok_month) <- month.abb
  molo_ok_month        <- stackApply(molo_ok, index_months, fun = sum)
  names(molo_ok_month) <- month.abb
  bola_ok_month        <- stackApply(bola_ok, index_months, fun = sum)
  names(bola_ok_month) <- month.abb
  print(paste0("+++OK"))
###

###
  # Creating yearly data
  print(paste0("+++Creating yearly data"))
  index_years          <- format(as.Date(names(molo_ok), format = "X%Y.%m.%d"), format = "%Y")
  eobs_ok_year         <- stackApply(eobs_ok, index_years, fun = sum)
  names(eobs_ok_year)  <- my_year
  era5_ok_year         <- stackApply(era5_ok, index_years, fun = sum)
  names(era5_ok_year)  <- my_year
  molo_ok_year         <- stackApply(molo_ok, index_years, fun = sum)
  names(molo_ok_year)  <- my_year
  bola_ok_year         <- stackApply(bola_ok, index_years, fun = sum)
  names(bola_ok_year)  <- my_year
  print(paste0("+++OK"))
###

###
  # Extracting data
  print(paste0("+++Extracting data..."))
  # soluzione più veloce (forse)
  # estrarre tutti i punti e per tutti i layers (cioè per tutti i time step)
  eobs_values <- as.data.frame(extract(eobs_ok_year, pointCoordinates))
  era5_values <- as.data.frame(extract(era5_ok_year*sf_era5, pointCoordinates))
  molo_values <- as.data.frame(extract(molo_ok_year, pointCoordinates))
  bola_values <- as.data.frame(extract(bola_ok_year, pointCoordinates))
  print(paste0("+++OK"))
###

# FINO A QUI I DATI RASTER
##########################

#  my_eobs <- NULL
#  my_era5 <- NULL
#  my_molo <- NULL
#  my_bola <- NULL
#  # Da data frame a vector 
#  for (i in 1:length(pointCoordinates)) {
#    my_eobs <- c(my_eobs,eobs_values[i,]) 
#    my_era5 <- c(my_era5,era5_values[i,])
#    my_molo <- c(my_molo,molo_values[i,])
#    my_bola <- c(my_bola,bola_values[i,])
#  }
#  my_eobs<-unlist(my_eobs)
#  my_era5<-unlist(my_era5)
#  my_molo<-unlist(my_molo)
#  my_bola<-unlist(my_bola)
#  print(paste0("+++OK"))
####
#
####  
#  # Store data for final Taylor diagram
#  my_eobs_long <- c(my_eobs_long,my_eobs)
#  my_era5_long <- c(my_era5_long,my_era5)
#  my_molo_long <- c(my_molo_long,my_molo)
#  my_bola_long <- c(my_bola_long,my_bola)  
####
#
####
## Loading observed data
#  print(paste0("+++Reading observed data"))
#  my_data_file         <- paste0(my_working_dir,"/NOAA/gsod/",my_year,"/NOAA-GSOD_DATA_",my_year,".csv")
#  my_obse_data         <- read.csv(my_data_file,header=TRUE,sep=',',na.strings = "99.99")
#  my_obse_data$STATION <- as.factor(my_obse_data$STATION)
#  my_obse_data$DATE    <- as.Date(my_obse_data$DATE, format="%Y-%m-%d") 
#  my_obse_data$PRCP    <- inches_to_mm*my_obse_data$PRCP
#  my_obse_data_new     <- subset(my_obse_data,DATE!=as.Date(paste0(my_year,"-01-01")))
#  print(paste0("+++OK"))
###

##############################
#TEST vs E-OBS
obs<-eobs_values[,1]
pre<-era5_values[,1]
if ( (my_year == ini_year) ) {
  taylor.diagram(obs, pre,     add=F, col="red",   ref.sd=TRUE, normalize=TD_normal, main="", grad.corr.lines=c(0.4,0.6,0.8))
} else {
  taylor.diagram(obs, pre,     add=T, col="red",   ref.sd=TRUE, normalize=TD_normal, main="", grad.corr.lines=c(0.4,0.6,0.8)) }
pre<-molo_values[,1]
taylor.diagram(obs, pre,     add=T, col="orange",   ref.sd=TRUE, normalize=TD_normal)
pre<-bola_values[,1]
taylor.diagram(obs, pre,     add=T, col="blue",   ref.sd=TRUE, normalize=TD_normal)

}
# Draw the lengend on the plot and save it
legend("topright",legend=c("ERA5-Land","MOLOCH","BOLAM"),pch=19,col=c("red","orange","blue"))
dev.off()


quit()



##############################
#TEST vs NOAA
obse_ok_year<- aggregate(my_obse_data_new$PRCP~my_obse_data_new$STATION, FUN=sum)
obse_ok_year$PRCP <- replace(obse_ok_year,obse_ok_year$PRCP<50,NA)
obs<-as.data.frame((obse_ok_year))[,2]
pre<-eobs_values[,1]
taylor.diagram(obs, pre,     add=F, col="gray",   ref.sd=TRUE, normalize=T, main="", grad.corr.lines=c(0.4,0.6,0.8))
pre<-era5_values[,1]
taylor.diagram(obs, pre,     add=T, col="red",   ref.sd=TRUE, normalize=T)
pre<-molo_values[,1]
taylor.diagram(obs, pre,     add=T, col="orange",   ref.sd=TRUE, normalize=T)
pre<-bola_values[,1]
taylor.diagram(obs, pre,     add=T, col="blue",   ref.sd=TRUE, normalize=T)


###
  # Plot points in the Taylor diagram
  print(paste0("+++Plotting data..."))
  if ( (my_year == 1981) ) {
    taylor.diagram(my_obse_data_new$PRCP, my_eobs,     add=F, col="gray",   ref.sd=TRUE, normalize=FALSE, main="", grad.corr.lines=c(0.4,0.6,0.8))

  } else {
    taylor.diagram(my_obse_data_new$PRCP, my_eobs,     add=T, col="gray",   ref.sd=TRUE, normalize=FALSE, main="", grad.corr.lines=c(0.4,0.6,0.8))
  }
  taylor.diagram(my_obse_data_new$PRCP,   my_era5*100, add=T, col="red",    ref.sd=TRUE, normalize=FALSE)
  taylor.diagram(my_obse_data_new$PRCP,   my_molo,     add=T, col="orange", ref.sd=TRUE, normalize=FALSE)
  taylor.diagram(my_obse_data_new$PRCP,   my_bola,     add=T, col="blue",   ref.sd=TRUE, normalize=FALSE)
###
  
  # End of my_year loop
  print(paste0("___End of ",my_year,"___"))
}
# Draw the lengend on the plot and save it
legend("topright",legend=c("ERA5-Land","MOLOCH","BOLAM"),pch=19,col=c("red","orange","blue"))
dev.off()


quit()



 
# Set output EPS file
print(paste0("+++Plotting the summary plot..."))
setEPS()
postscript(paste0(my_figs_dir,"/Taylor_Diag_final.eps"))
taylor.diagram(my_eobs_long,my_era5_long*100,add=F, col="red",   ref.sd=TRUE, normalize=TD_normal, main="", pcex=1.5, grad.corr.lines=c(0.4,0.5,0.6,0.7,0.8))
taylor.diagram(my_eobs_long,my_molo_long,    add=T, col="orange",ref.sd=TRUE, normalize=TD_normal, pcex=1.5)
taylor.diagram(my_eobs_long,my_bola_long,    add=T, col="blue",  ref.sd=TRUE, normalize=TD_normal, pcex=1.5)
lpos<-sd(my_eobs_long)
legend("topright",legend=c("ERA5-Land","MOLOCH","BOLAM"),pch=19,col=c("red","orange","blue"), cex=1)
dev.off()
print(paste0("Ok"))

# Standard statistical verification scores for continuos variables
print(paste0("+++Calculating standard statistical verification scores..."))
# Correlation
cor_era5 <- cor(my_era5_long*100,my_eobs_long, use = "complete.obs")
cor_molo <- cor(my_molo_long,my_eobs_long, use = "complete.obs")
cor_bola <- cor(my_bola_long,my_eobs_long, use = "complete.obs")
# RMSE
rmse_era5 <- sqrt( mean( (my_era5_long*100-my_eobs_long)^2 , na.rm = TRUE ) ) 
rmse_molo <- sqrt( mean( (my_molo_long-my_eobs_long)^2 , na.rm = TRUE ) ) 
rmse_bola <- sqrt( mean( (my_bola_long-my_eobs_long)^2 , na.rm = TRUE ) ) 
# (multiplicative) bias
bias_era5 <- (mean(my_era5_long*100, na.rm = TRUE))/(mean(my_eobs_long, na.rm = TRUE))
bias_molo <- (mean(my_molo_long, na.rm = TRUE))/(mean(my_eobs_long, na.rm = TRUE))
bias_bola <- (mean(my_bola_long, na.rm = TRUE))/(mean(my_eobs_long, na.rm = TRUE))
# ME, MSE, MAE
verify_era5 <- verify(my_eobs_long,my_era5_long*100, frcst.type = "cont", obs.type = "cont",)
verify_molo <- verify(my_eobs_long,my_molo_long, frcst.type = "cont", obs.type = "cont",)
verify_bola <- verify(my_eobs_long,my_bola_long, frcst.type = "cont", obs.type = "cont",)
# Write to output file
df <- data.frame(c(cor_era5,rmse_era5,bias_era5,verify_era5$ME,verify_era5$MAE), c(cor_molo,rmse_molo,bias_molo,verify_molo$ME,verify_molo$MAE), c(cor_bola,rmse_bola,bias_bola,verify_bola$ME,verify_bola$MAE))
write.table(df, paste0(my_output_dir,"/verification_scores.csv"), col.names = c("ERA5-Land","MOLOCH","BOLAM"), row.names = c("Correlation","RMSE","Bias","Mean Error","Mean Absolute Error"), sep=";")
print(paste0("+++OK"))

# Byebye
print(paste0("Byebye"))
quit()

